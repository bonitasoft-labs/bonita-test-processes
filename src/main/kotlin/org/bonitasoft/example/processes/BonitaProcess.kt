/*
 * Copyright 2020 Bonitasoft S.A.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.bonitasoft.example.processes

import org.bonitasoft.engine.api.APIClient
import org.bonitasoft.engine.bpm.bar.BusinessArchive
import org.bonitasoft.engine.bpm.bar.BusinessArchiveBuilder
import org.bonitasoft.engine.bpm.bar.actorMapping.Actor
import org.bonitasoft.engine.bpm.bar.actorMapping.ActorMapping
import org.bonitasoft.engine.bpm.bar.form.model.FormMappingDefinition
import org.bonitasoft.engine.bpm.flownode.UserTaskDefinition
import org.bonitasoft.engine.bpm.process.impl.ProcessDefinitionBuilder
import org.bonitasoft.engine.form.FormMappingTarget
import org.bonitasoft.engine.form.FormMappingType
import org.bonitasoft.example.safeExec
import java.util.function.Consumer

abstract class BonitaProcess(val enable:Boolean = true) : Consumer<APIClient> {
    val businessArchive: BusinessArchive by lazy {
        build()
    }

    val name: String by lazy { businessArchive.processDefinition.name }
    val version: String by lazy { businessArchive.processDefinition.version }

    var processDefinitionId: Long? = null

    override fun accept(client: APIClient) {
        client.safeExec {
            println("Disable process $name $version")
            processDefinitionId = processAPI.getProcessDefinitionId(name, version)
            processDefinitionId?.apply { processAPI.disableProcess(this) }
        }
        client.safeExec {
            println("Delete process $name $version")
            processDefinitionId?.apply {
                processAPI.deleteArchivedProcessInstances(this, 0, 1000000)
                processAPI.deleteProcessInstances(this, 0, 1000000)
                processAPI.deleteProcessDefinition(this)
            }
        }
        client.safeExec {
            println("Deploy process $name $version")
            processDefinitionId = processAPI.deploy(businessArchive).id
        }
        client.safeExec {
            if (enable) {
                println("Enable process $name $version")
                processAPI.enableProcess(processDefinitionId!!)
            }
        }
    }

    open fun withResources(bar: BusinessArchiveBuilder) {
    }

    open fun build(): BusinessArchive {
        val bar = BusinessArchiveBuilder().createNewBusinessArchive().apply {
            setProcessDefinition(process().done())
            withResources(this)
        }.done()
        bar.processDefinition.actorsList.forEach { actor ->
            if (bar.actorMapping == null) {
                bar.actorMapping = ActorMapping().apply {
                    addActor(Actor(actor.name).apply {
                        users.add("walter.bates")
                    })
                }
            }
        }
        if (bar.formMappingModel.formMappings.isEmpty()) {
            bar.processDefinition.flowElementContainer.activities.forEach {
                if (it is UserTaskDefinition) {
                    bar.formMappingModel.addFormMapping(FormMappingDefinition("custompage_taskAutogeneratedForm", FormMappingType.TASK, FormMappingTarget.INTERNAL, it.name))
                }
            }
            bar.formMappingModel.addFormMapping(FormMappingDefinition("custompage_processAutogeneratedForm", FormMappingType.PROCESS_START, FormMappingTarget.INTERNAL))
            bar.formMappingModel.addFormMapping(FormMappingDefinition("custompage_caseoverview", FormMappingType.PROCESS_OVERVIEW, FormMappingTarget.INTERNAL))
        }
        return bar
    }

    abstract fun process(): ProcessDefinitionBuilder

}