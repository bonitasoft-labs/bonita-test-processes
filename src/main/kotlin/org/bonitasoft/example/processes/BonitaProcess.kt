/*
 * Copyright 2020 Bonitasoft S.A.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.bonitasoft.example.processes

import org.bonitasoft.engine.api.APIClient
import org.bonitasoft.engine.bpm.bar.BusinessArchive
import org.bonitasoft.engine.bpm.bar.BusinessArchiveBuilder
import org.bonitasoft.engine.bpm.bar.actorMapping.Actor
import org.bonitasoft.engine.bpm.bar.actorMapping.ActorMapping
import org.bonitasoft.engine.bpm.bar.form.model.FormMappingDefinition
import org.bonitasoft.engine.bpm.bar.form.model.FormMappingModel
import org.bonitasoft.engine.bpm.flownode.UserTaskDefinition
import org.bonitasoft.engine.bpm.process.DesignProcessDefinition
import org.bonitasoft.engine.bpm.process.impl.ProcessDefinitionBuilder
import org.bonitasoft.engine.form.FormMappingTarget
import org.bonitasoft.engine.form.FormMappingType
import org.bonitasoft.example.safeExec
import java.util.function.Consumer

abstract class BonitaProcess : Consumer<APIClient> {
    val businessArchive: BusinessArchive by lazy {
        BusinessArchiveBuilder().createNewBusinessArchive().apply {
            val processDefinition = process().done()
            setProcessDefinition(processDefinition)
            withResources(this, processDefinition)
        }.done()
    }

    val name: String by lazy { businessArchive.processDefinition.name }
    val version: String by lazy { businessArchive.processDefinition.version }

    var processDefinitionId: Long? = null

    override fun accept(client: APIClient) {
        client.safeExec {
            println("Disable process $name $version")
            processDefinitionId = processAPI.getProcessDefinitionId(name, version)
            processDefinitionId?.apply { processAPI.disableProcess(this) }
        }
        client.safeExec {
            println("Delete process $name $version")
            processDefinitionId?.apply {
                processAPI.deleteArchivedProcessInstances(this, 0, 1000000)
                processAPI.deleteProcessInstances(this, 0, 1000000)
                processAPI.deleteProcessDefinition(this)
            }
        }
        client.safeExec {
            println("Deploy process $name $version")
            processDefinitionId = processAPI.deploy(businessArchive).id
        }
        client.safeExec {
            println("Enable process $name $version")
            processAPI.enableProcess(processDefinitionId!!)
        }
    }

    open fun withResources(bar: BusinessArchiveBuilder, processDefinition: DesignProcessDefinition) {
        processDefinition.actorsList.forEach { actor ->
            bar.actorMapping = ActorMapping().apply {
                addActor(Actor(actor.name).apply {
                    users.add("walter.bates")
                })
            }
        }
        val formMappingModel = FormMappingModel()
        bar.setFormMappings(formMappingModel)
        processDefinition.flowElementContainer.activities.forEach {
            if (it is UserTaskDefinition) {
                formMappingModel.addFormMapping(FormMappingDefinition("custompage_taskAutogeneratedForm", FormMappingType.TASK, FormMappingTarget.INTERNAL, it.name))
            }
        }
        formMappingModel.addFormMapping(FormMappingDefinition("custompage_processAutogeneratedForm", FormMappingType.PROCESS_START, FormMappingTarget.INTERNAL))
        formMappingModel.addFormMapping(FormMappingDefinition("custompage_caseoverview", FormMappingType.PROCESS_OVERVIEW, FormMappingTarget.INTERNAL))
    }

    abstract fun process(): ProcessDefinitionBuilder

}